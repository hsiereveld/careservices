name: Deploy to Production

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8'

jobs:
  test:
    name: Run Tests
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event.inputs.environment || 'production' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Run deployment checks
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1

  database-migration:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run migrations
        run: |
          pnpm run db:generate
          pnpm run db:migrate:deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Verify database health
        run: pnpm run db:health
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-vercel, database-migration]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Purge CDN Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

      - name: Warm up cache
        run: |
          urls=(
            "/"
            "/services"
            "/professionals"
            "/login"
            "/api/health"
          )
          for url in "${urls[@]}"; do
            curl -s -o /dev/null -w "%{http_code}" "${{ secrets.PRODUCTION_URL }}$url"
          done

      - name: Run smoke tests
        run: |
          pnpm install --frozen-lockfile
          pnpm run test:smoke
        env:
          SMOKE_TEST_URL: ${{ secrets.PRODUCTION_URL }}

      - name: Monitor deployment
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || 'production' }}',
              required_contexts: [],
              auto_merge: false,
              production_environment: true,
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ secrets.PRODUCTION_URL }}',
              description: 'Deployment completed successfully',
            });

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: post-deployment
    if: failure()
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout previous commit
        uses: actions/checkout@v4
        with:
          ref: HEAD~1

      - name: Trigger rollback deployment
        run: |
          vercel rollback --token=${{ secrets.VERCEL_TOKEN }}

      - name: Notify team
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Production deployment failed and was rolled back',
              body: `Deployment to production failed and was automatically rolled back.
              
              **Commit:** ${context.sha}
              **Author:** ${context.actor}
              **Message:** ${context.payload.head_commit.message}
              
              Please investigate the failure and fix before attempting another deployment.`,
              labels: ['bug', 'production', 'urgent'],
            });

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: post-deployment
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.environment || 'production' }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: CareService Deployment ${{ job.status }}
          to: devops@careservice.es
          from: CI/CD Pipeline
          body: |
            Deployment to ${{ github.event.inputs.environment || 'production' }} has ${{ job.status }}.
            
            Details:
            - Commit: ${{ github.sha }}
            - Author: ${{ github.actor }}
            - Branch: ${{ github.ref }}
            - Time: ${{ github.event.head_commit.timestamp }}
        if: always()